FROM nvidia/cuda:11.0-devel-ubuntu20.04
ARG GPU_VERSION
ARG LIBINT_LMAX=5

# author: Ole Schuett

# Installs toolchain with CUDA and MKL.
# WARNING: The resulting image will violate the GPL and must not be distributed.

# install Ubuntu packages.
COPY ./install_requirements_ubuntu.sh .
RUN ./install_requirements_ubuntu.sh

# Install some more Ubuntu packages.
RUN apt-get update -qq && apt-get install -qq --no-install-recommends \
    gfortran                                                          \
    mpich                                                             \
    libmpich-dev                                                      \
   && rm -rf /var/lib/apt/lists/*

# Setup CUDA environment.
ENV CUDA_PATH /usr/local/cuda
ENV LD_LIBRARY_PATH ${CUDA_PATH}/lib64:${LD_LIBRARY_PATH}

# Install Intel MKL.
# https://software.intel.com/en-us/articles/installing-intel-free-libs-and-python-apt-repo
RUN wget -q https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB -O- | apt-key add - && \
    echo 'deb https://apt.repos.intel.com/mkl all main' > /etc/apt/sources.list.d/intel-mkl.list && \
    apt-get update -qq && apt-get install -qq --no-install-recommends intel-mkl-64bit-2019.4-070 && \
    rm -rf /var/lib/apt/lists/*
ENV MKLROOT=/opt/intel/compilers_and_libraries/linux/mkl

# Build toolchain.
WORKDIR /opt/cp2k-toolchain
RUN mkdir scripts
COPY ./scripts/VERSION \
     ./scripts/parse_if.py \
     ./scripts/tool_kit.sh \
     ./scripts/common_vars.sh \
     ./scripts/signal_trap.sh \
     ./scripts/get_openblas_arch.sh \
     ./scripts/

# Dry-run leaves behind config files for the followup install scripts.
# This breaks up the lengthy installation into smaller docker build steps.
COPY ./install_cp2k_toolchain.sh .
RUN ./install_cp2k_toolchain.sh  \
    --mpi-mode=mpich             \
    --math-mode=mkl              \
    --with-scalapack=no          \
    --libint-lmax=${LIBINT_LMAX} \
    --gpu-ver=${GPU_VERSION}     \
    --dry-run

COPY ./scripts/stage0/ ./scripts/stage0/
RUN  ./scripts/stage0/install_stage0.sh && rm -rf ./build

COPY ./scripts/stage1/ ./scripts/stage1/
RUN  ./scripts/stage1/install_stage1.sh && rm -rf ./build

COPY ./scripts/stage2/ ./scripts/stage2/
RUN  ./scripts/stage2/install_stage2.sh && rm -rf ./build

COPY ./scripts/stage3/ ./scripts/stage3/
RUN  ./scripts/stage3/install_stage3.sh && rm -rf ./build

COPY ./scripts/stage4/ ./scripts/stage4/
RUN  ./scripts/stage4/install_stage4.sh && rm -rf ./build

COPY ./scripts/stage5/ ./scripts/stage5/
RUN  ./scripts/stage5/install_stage5.sh && rm -rf ./build

COPY ./scripts/stage6/ ./scripts/stage6/
RUN  ./scripts/stage6/install_stage6.sh && rm -rf ./build

COPY ./scripts/stage7/ ./scripts/stage7/
RUN  ./scripts/stage7/install_stage7.sh && rm -rf ./build

COPY ./scripts/stage8/ ./scripts/stage8/
RUN  ./scripts/stage8/install_stage8.sh && rm -rf ./build

COPY ./scripts/arch_base.tmpl \
     ./scripts/generate_arch_files.sh \
     ./scripts/
RUN ./scripts/generate_arch_files.sh && rm -rf ./build

#EOF
